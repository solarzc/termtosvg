<?xml version="1.0" encoding="utf-8"?>
<svg id="terminal" baseProfile="full" viewBox="0 0 703 350" width="703" version="1.1"
     xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <defs>
        <termtosvg:template_settings xmlns:termtosvg="https://github.com/nbedos/termtosvg">
            <termtosvg:screen_geometry columns="82" rows="12"/>
        </termtosvg:template_settings>
        <style type="text/css" id="generated"><![CDATA[
        :root {
            --animation-duration: 10000ms;
            --foreground-color: #f8f8f2;
            --background-color: #272822;}]]>
        </style>
        <style type="text/css"><![CDATA[
            /* gjm8 color theme (source: https://terminal.sexy/) */
            .foreground {fill: #c5c5c5;}
            .background {fill: #1c1c1c;}
            .color0 {fill: #1c1c1c;}
            .color1 {fill: #ff005b;}
            .color2 {fill: #cee318;}
            .color3 {fill: #ffe755;}
            .color4 {fill: #048ac7;}
            .color5 {fill: #833c9f;}
            .color6 {fill: #0ac1cd;}
            .color7 {fill: #e5e5e5;}
            .color8 {fill: #1c1c1c;}
            .color9 {fill: #ff005b;}
            .color10 {fill: #cee318;}
            .color11 {fill: #ffe755;}
            .color12 {fill: #048ac7;}
            .color13 {fill: #833c9f;}
            .color14 {fill: #0ac1cd;}
            .color15 {fill: #e5e5e5;}
            #wide_track {
                transform: translate(150px, calc(100% - 40px));
            }
            #track {
                transform: translate(150px, calc(100% - 33px));
            }
            #slider_button {
                transform: translate(0px, calc(100% - 30px));
            }
            #timer {
                transform: translate(60px, calc(100% - 38px));
            }
            #play-button {
                transform: translate(30px, calc(100% - 45px));
            }
            #pause-button {
                transform: translate(30px, calc(100% - 45px));
            }

            /* The following style attributes are required by termtosvg and should probably
               not be modified, except for the font name. */
            #screen {
                font-family: DejaVu Sans Mono, monospace;
                font-style: normal;
                font-size: 14px;
            }

            text {
                dominant-baseline: text-before-edge;
            }]]>
        </style>
        <rect id="slider_wide_track" height="20px" width="65%"/>
        <rect id="slider_track" height="6px" width="65%"/>
        <circle id="slider_button" r="10px" class="color1"/>
        <g id="icon-play">
            <path d="M0 4l14 11-14 11z"/>
        </g>
        <g id="icon-pause">
            <rect x="0" y="5" width="5" height="20"/>
            <rect x="10" y="5" width="5" height="20"/>
        </g>
    </defs>
    <rect id="terminalui" class="background" width="100%" height="100%" ry="4.5826941"/>
    <circle cx="24" cy="23" r="7" class="color1"/>
    <circle cx="44" cy="23" r="7" class="color3"/>
    <circle cx="64" cy="23" r="7" class="color2"/>
    <svg id="screen" width="656" x="23" y="50" viewBox="0 0 656 204"
         preserveAspectRatio="xMidYMin meet">
        <!-- The content of this SVG tag does not serve any purpose and will be replaced
        by the code generated by termtosvg at animation rendering time -->
        <defs>
            <text id="awesome" class="foreground" lengthAdjust="spacingAndGlyphs" textLength="168">
                termtosvg is awesome!
            </text>
            <style type="text/css"><![CDATA[* {font-family: "DejaVu Sans Mono", monospace; font-style: normal; font-size: 14px}
                text {dominant-baseline: text-before-edge}
                ]]></style>
        </defs>
        <rect class="background" height="100%" width="100%"/>
        <use xlink:href="#awesome" x="0" y="0"/>
        <use xlink:href="#awesome" x="8" y="17"/>
        <use xlink:href="#awesome" x="16" y="34"/>
        <use xlink:href="#awesome" x="24" y="51"/>
        <use xlink:href="#awesome" x="32" y="68"/>
        <use xlink:href="#awesome" x="40" y="85"/>
        <use xlink:href="#awesome" x="48" y="102"/>
        <use xlink:href="#awesome" x="56" y="119"/>
        <use xlink:href="#awesome" x="64" y="136"/>
        <use xlink:href="#awesome" x="72" y="153"/>
        <use xlink:href="#awesome" x="80" y="170"/>
        <use xlink:href="#awesome" x="88" y="187">
            <animate attributeName="x" begin="0ms;anim.end" dur="10000ms"
                     from="88" to="588" id="anim"/>
        </use>
    </svg>
    <text id="timer" class="foreground">0:00/0:00</text>
    <!-- Invisible, wider track to make frame seeking easier -->
    <use xlink:href="#slider_wide_track" id="wide_track" class="background"/>
    <!-- Visible track -->
    <use xlink:href="#slider_track" id="track" class="foreground"/>
    <use xlink:href="#slider_button" id="slider_1" x="0px">
        <animate attributeName="x" begin="0ms;anim_slider_button.end" dur="0ms"
                 from="0" to="0" id="anim_slider_button"/>
    </use>
    <use xlink:href="#icon-play" id="play-button" class="foreground"/>
    <use xlink:href="#icon-pause" id="pause-button" class="foreground"/>
    <script type="text/javascript"><![CDATA[
var terminal   = document.getElementById('terminal');
var screen = terminal.getElementById('screen');
var slider_1  = terminal.getElementById('slider_1');
var anim_slider_button = document.getElementById('anim_slider_button');
var style = getComputedStyle(terminal);
var animation_duration = parseInt(style.getPropertyValue('--animation-duration')) / 1000;

function getTranslateX(elem) {
  var style = window.getComputedStyle(elem);
  var matrix = new WebKitCSSMatrix(style.webkitTransform);
  return parseInt(matrix.m41)
}

track_begin = getTranslateX(terminal.getElementById('track'))
anim_slider_button.setAttribute('from', track_begin);

var track_width = terminal.getElementById('track').getBoundingClientRect().width;
anim_slider_button.setAttribute('to', track_begin + track_width);

var play_button = terminal.getElementById('play-button');
var pause_button = terminal.getElementById('pause-button');

// Set slider button animation duration
anim_slider_button.setAttribute('dur', style.getPropertyValue('--animation-duration'));

play_button.setAttribute('display', 'none');
pause_button.setAttribute('display', 'inline');

function togglePlayPause() {
    if (terminal.animationsPaused() || screen.animationsPaused()) {
        terminal.unpauseAnimations()
        screen.unpauseAnimations()
        play_button.setAttribute('display', 'none')
        pause_button.setAttribute('display', 'inline')
    } else {
        terminal.pauseAnimations()
        screen.pauseAnimations()
        play_button.setAttribute('display', 'inline')
        pause_button.setAttribute('display', 'none')
    }
};

play_button.addEventListener('click', togglePlayPause, false)
pause_button.addEventListener('click', togglePlayPause, false)

var limitLower = parseInt(anim_slider_button.getAttribute('from'));
/* Subtract a few pixels so that bringing the button to the end of the track does make it jump to
the beginning */
var limitUpper = parseInt(anim_slider_button.getAttribute('to')) - 8;

var timer = terminal.getElementById('timer')

function timer_from_ms(t) {
    minutes = Math.floor(t / 60);
    seconds = Math.floor(t % 60);
    return minutes + ':' + ("0" + seconds).slice(-2)
}

function update_timer(){
    var current_time = terminal.getCurrentTime() % animation_duration
    timer.textContent =  timer_from_ms(current_time) + "/" + timer_from_ms(animation_duration)
}

setInterval(update_timer, "100ms")

// Return X position for an event
function mx(evt){
    var pt = terminal.createSVGPoint();
    pt.x = evt.clientX;
    return pt.matrixTransform(terminal.getScreenCTM().inverse());
}

// Set the current time of the animation to get the slider button under the cursor
var move = function(evt){
    var cursor_position = mx(evt);
    if ( cursor_position.x < limitLower || cursor_position.x > limitUpper ) {
        return;
    }
    new_time = animation_duration * (cursor_position.x - limitLower) / (limitUpper - limitLower)
    terminal.setCurrentTime(new_time)
    screen.setCurrentTime(new_time)
};

// Move the slider button to the cursor position when a click happens on the track of the slider
terminal.getElementById('wide_track').addEventListener('click', move, false);
terminal.getElementById('track').addEventListener('click', move, false);

// Enable slider button dragging along the track
var dragging = false;
slider_1.addEventListener('mousedown',function(evt){
        is_playing = !(terminal.animationsPaused() && screen.animationsPaused())
        if (is_playing) {
            terminal.pauseAnimations()
            screen.pauseAnimations()
        }

        dragging = true;
        terminal.addEventListener('mousemove', move, false);
        document.documentElement.addEventListener('mouseup', function(){
                dragging = false;
                if (is_playing) {
                    terminal.unpauseAnimations()
                    screen.unpauseAnimations()
                }
                terminal.removeEventListener('mousemove', move, false);
        }, false);
}, false);
]]></script>
</svg>

